{% extends 'base.html.twig' %}

{% block title %}Remove Logo - Habesha Tools{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        #imageCanvas {
            cursor: crosshair;
            max-width: 100%;
            height: auto;
        }
        .canvas-container {
            position: relative;
            max-width: 100%;
            overflow: auto;
        }
        #loading {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            z-index: 1000;
            justify-content: center;
            align-items: center;
            color: white;
        }
    </style>
{% endblock %}

{% block body %}
<div class="container py-5">
    <div class="row">
        <div class="col-12">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h1 class="card-title text-center mb-4">Select Logo Area</h1>
                    <p class="text-center mb-4">Click and drag to draw a rectangle around the logo or watermark you want to remove.</p>
                    
                    <div class="canvas-container mb-4">
                        <canvas id="imageCanvas"></canvas>
                    </div>

                    <div class="d-flex justify-content-between">
                        <button class="btn btn-secondary" onclick="resetSelection()">Reset Selection</button>
                        <button class="btn btn-primary" onclick="processImage()">Remove Logo</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div id="loading">
    <div class="spinner-border text-light" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
</div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        let canvas, ctx;
        let isDrawing = false;
        let startX, startY;
        let currentX, currentY;
        let imageObj = new Image();
        
        imageObj.onload = function() {
            canvas = document.getElementById('imageCanvas');
            canvas.width = imageObj.width;
            canvas.height = imageObj.height;
            ctx = canvas.getContext('2d');
            ctx.drawImage(imageObj, 0, 0);
            
            canvas.addEventListener('mousedown', startDrawing);
            canvas.addEventListener('mousemove', draw);
            canvas.addEventListener('mouseup', stopDrawing);
        };
        
        imageObj.src = "{{ vich_uploader_asset(image, 'imageFile') }}";
        
        function startDrawing(e) {
            isDrawing = true;
            const rect = canvas.getBoundingClientRect();
            startX = (e.clientX - rect.left) * (canvas.width / rect.width);
            startY = (e.clientY - rect.top) * (canvas.height / rect.height);
            currentX = startX;
            currentY = startY;
        }
        
        function draw(e) {
            if (!isDrawing) return;
            
            const rect = canvas.getBoundingClientRect();
            currentX = (e.clientX - rect.left) * (canvas.width / rect.width);
            currentY = (e.clientY - rect.top) * (canvas.height / rect.height);
            
            redrawImage();
            
            // Draw rectangle
            ctx.beginPath();
            ctx.rect(
                Math.min(startX, currentX),
                Math.min(startY, currentY),
                Math.abs(currentX - startX),
                Math.abs(currentY - startY)
            );
            ctx.strokeStyle = '#ff0000';
            ctx.lineWidth = 2;
            ctx.stroke();
            ctx.fillStyle = 'rgba(255, 0, 0, 0.2)';
            ctx.fill();
        }
        
        function stopDrawing() {
            isDrawing = false;
        }
        
        function redrawImage() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            ctx.drawImage(imageObj, 0, 0);
        }
        
        function resetSelection() {
            redrawImage();
            startX = startY = currentX = currentY = null;
        }
        
        function processImage() {
            if (!startX || !startY || !currentX || !currentY) {
                alert('Please select an area first');
                return;
            }
            
            // Convert rectangle to points array (clockwise from top-left)
            const points = [
                { x: Math.min(startX, currentX), y: Math.min(startY, currentY) }, // Top-left
                { x: Math.max(startX, currentX), y: Math.min(startY, currentY) }, // Top-right
                { x: Math.max(startX, currentX), y: Math.max(startY, currentY) }, // Bottom-right
                { x: Math.min(startX, currentX), y: Math.max(startY, currentY) }  // Bottom-left
            ];
            
            document.getElementById('loading').style.display = 'flex';
            
            fetch('{{ path('app_logo_remover_process', {'id': image.id}) }}', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    coordinates: points
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    window.location.href = '{{ path('app_logo_remover_success', {'id': image.id}) }}';
                } else {
                    alert(data.error || 'An error occurred');
                    document.getElementById('loading').style.display = 'none';
                }
            })
            .catch(error => {
                alert('An error occurred');
                document.getElementById('loading').style.display = 'none';
                console.error('Error:', error);
            });
        }
    </script>
{% endblock %} 