{% extends 'base.html.twig' %}

{% block title %}Batch Background Removal{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .batch-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 1rem;
            padding: 1rem;
        }
        .image-card {
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 1rem;
            text-align: center;
        }
        .image-card img {
            max-width: 100%;
            height: auto;
            margin-bottom: 1rem;
        }
        .progress {
            height: 20px;
            margin: 1rem 0;
        }
        .status {
            margin-top: 0.5rem;
            font-weight: bold;
        }
        .success { color: #28a745; }
        .error { color: #dc3545; }
        .pending { color: #ffc107; }
    </style>
{% endblock %}

{% block body %}
    <div class="container mt-4">
        <h1 class="mb-4">Batch Background Removal</h1>
        <div class="batch-grid">
            {% for image in images %}
                <div class="image-card" data-image-id="{{ image.id }}">
                    <img src="{{ asset('uploads/images/' ~ image.imageName) }}" alt="Original image">
                    <div class="progress">
                        <div class="progress-bar" role="progressbar" style="width: 0%"></div>
                    </div>
                    <div class="status pending">Pending...</div>
                    <div class="result-container" style="display: none;">
                        <img class="result-image" src="" alt="Processed image" style="display: none;">
                        <a href="#" class="btn btn-primary download-btn" style="display: none;">Download</a>
                    </div>
                </div>
            {% endfor %}
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const cards = document.querySelectorAll('.image-card');
            let processedCount = 0;

            function processNext(cards, index) {
                if (index >= cards.length) return;

                const card = cards[index];
                const imageId = card.dataset.imageId;
                const progressBar = card.querySelector('.progress-bar');
                const status = card.querySelector('.status');
                const resultContainer = card.querySelector('.result-container');
                const resultImage = card.querySelector('.result-image');
                const downloadBtn = card.querySelector('.download-btn');

                status.textContent = 'Processing...';
                status.className = 'status pending';
                progressBar.style.width = '50%';

                fetch(`/background-remover/process/${imageId}`, {
                    method: 'POST',
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        progressBar.style.width = '100%';
                        status.textContent = 'Completed';
                        status.className = 'status success';
                        
                        resultImage.src = data.resultUrl;
                        resultImage.style.display = 'block';
                        downloadBtn.href = data.resultUrl;
                        downloadBtn.download = 'processed_image.png';
                        downloadBtn.style.display = 'inline-block';
                        resultContainer.style.display = 'block';
                    } else {
                        throw new Error(data.error || 'Processing failed');
                    }
                })
                .catch(error => {
                    progressBar.style.width = '100%';
                    progressBar.className = 'progress-bar bg-danger';
                    status.textContent = 'Error: ' + error.message;
                    status.className = 'status error';
                })
                .finally(() => {
                    processedCount++;
                    if (processedCount < cards.length) {
                        processNext(cards, index + 1);
                    }
                });
            }

            // Start processing the first image
            if (cards.length > 0) {
                processNext(cards, 0);
            }
        });
    </script>
{% endblock %} 